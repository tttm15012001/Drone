// Generated by gencpp from file beginner/test.msg
// DO NOT EDIT!


#ifndef BEGINNER_MESSAGE_TEST_H
#define BEGINNER_MESSAGE_TEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace beginner
{
template <class ContainerAllocator>
struct test_
{
  typedef test_<ContainerAllocator> Type;

  test_()
    : years(0.0)
    , age(0)  {
    }
  test_(const ContainerAllocator& _alloc)
    : years(0.0)
    , age(0)  {
  (void)_alloc;
    }



   typedef float _years_type;
  _years_type years;

   typedef uint8_t _age_type;
  _age_type age;





  typedef boost::shared_ptr< ::beginner::test_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beginner::test_<ContainerAllocator> const> ConstPtr;

}; // struct test_

typedef ::beginner::test_<std::allocator<void> > test;

typedef boost::shared_ptr< ::beginner::test > testPtr;
typedef boost::shared_ptr< ::beginner::test const> testConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::beginner::test_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::beginner::test_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::beginner::test_<ContainerAllocator1> & lhs, const ::beginner::test_<ContainerAllocator2> & rhs)
{
  return lhs.years == rhs.years &&
    lhs.age == rhs.age;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::beginner::test_<ContainerAllocator1> & lhs, const ::beginner::test_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace beginner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::beginner::test_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beginner::test_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beginner::test_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beginner::test_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner::test_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner::test_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::beginner::test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6616f4f93356a20eba531c90e0875eb4";
  }

  static const char* value(const ::beginner::test_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6616f4f93356a20eULL;
  static const uint64_t static_value2 = 0xba531c90e0875eb4ULL;
};

template<class ContainerAllocator>
struct DataType< ::beginner::test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beginner/test";
  }

  static const char* value(const ::beginner::test_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::beginner::test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 years\n"
"uint8 age\n"
;
  }

  static const char* value(const ::beginner::test_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::beginner::test_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.years);
      stream.next(m.age);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct test_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beginner::test_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::beginner::test_<ContainerAllocator>& v)
  {
    s << indent << "years: ";
    Printer<float>::stream(s, indent + "  ", v.years);
    s << indent << "age: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.age);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEGINNER_MESSAGE_TEST_H
